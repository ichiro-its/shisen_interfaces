// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: shisen.proto
#ifndef GRPC_shisen_2eproto__INCLUDED
#define GRPC_shisen_2eproto__INCLUDED

#include "shisen.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace shisen_interfaces {
namespace proto3 {

class Config final {
 public:
  static constexpr char const* service_full_name() {
    return "shisen_interfaces.proto3.Config";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::shisen_interfaces::proto3::CaptureSetting* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::CaptureSetting>> AsyncGetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::CaptureSetting>>(AsyncGetCaptureSettingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::CaptureSetting>> PrepareAsyncGetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::CaptureSetting>>(PrepareAsyncGetCaptureSettingRaw(context, request, cq));
    }
    virtual ::grpc::Status SaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::shisen_interfaces::proto3::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Empty>> AsyncSaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Empty>>(AsyncSaveCaptureSettingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Empty>> PrepareAsyncSaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Empty>>(PrepareAsyncSaveCaptureSettingRaw(context, request, cq));
    }
    virtual ::grpc::Status SetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::shisen_interfaces::proto3::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Empty>> AsyncSetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Empty>>(AsyncSetCaptureSettingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Empty>> PrepareAsyncSetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Empty>>(PrepareAsyncSetCaptureSettingRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::shisen_interfaces::proto3::Image* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Image>> AsyncGetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Image>>(AsyncGetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Image>> PrepareAsyncGetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Image>>(PrepareAsyncGetImageRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::CaptureSetting* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::CaptureSetting* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::Image* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::Image* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::CaptureSetting>* AsyncGetCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::CaptureSetting>* PrepareAsyncGetCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Empty>* AsyncSaveCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Empty>* PrepareAsyncSaveCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Empty>* AsyncSetCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Empty>* PrepareAsyncSetCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Image>* AsyncGetImageRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shisen_interfaces::proto3::Image>* PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::shisen_interfaces::proto3::CaptureSetting* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::CaptureSetting>> AsyncGetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::CaptureSetting>>(AsyncGetCaptureSettingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::CaptureSetting>> PrepareAsyncGetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::CaptureSetting>>(PrepareAsyncGetCaptureSettingRaw(context, request, cq));
    }
    ::grpc::Status SaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::shisen_interfaces::proto3::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>> AsyncSaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>>(AsyncSaveCaptureSettingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>> PrepareAsyncSaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>>(PrepareAsyncSaveCaptureSettingRaw(context, request, cq));
    }
    ::grpc::Status SetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::shisen_interfaces::proto3::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>> AsyncSetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>>(AsyncSetCaptureSettingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>> PrepareAsyncSetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>>(PrepareAsyncSetCaptureSettingRaw(context, request, cq));
    }
    ::grpc::Status GetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::shisen_interfaces::proto3::Image* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Image>> AsyncGetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Image>>(AsyncGetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Image>> PrepareAsyncGetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Image>>(PrepareAsyncGetImageRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::CaptureSetting* response, std::function<void(::grpc::Status)>) override;
      void GetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::CaptureSetting* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response, std::function<void(::grpc::Status)>) override;
      void SaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::Image* response, std::function<void(::grpc::Status)>) override;
      void GetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::Image* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::CaptureSetting>* AsyncGetCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::CaptureSetting>* PrepareAsyncGetCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>* AsyncSaveCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>* PrepareAsyncSaveCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>* AsyncSetCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>* PrepareAsyncSetCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Image>* AsyncGetImageRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Image>* PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCaptureSetting_;
    const ::grpc::internal::RpcMethod rpcmethod_SaveCaptureSetting_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCaptureSetting_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetCaptureSetting(::grpc::ServerContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::CaptureSetting* response);
    virtual ::grpc::Status SaveCaptureSetting(::grpc::ServerContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response);
    virtual ::grpc::Status SetCaptureSetting(::grpc::ServerContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response);
    virtual ::grpc::Status GetImage(::grpc::ServerContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::Image* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCaptureSetting() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::CaptureSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCaptureSetting(::grpc::ServerContext* context, ::shisen_interfaces::proto3::Empty* request, ::grpc::ServerAsyncResponseWriter< ::shisen_interfaces::proto3::CaptureSetting>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SaveCaptureSetting() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SaveCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveCaptureSetting(::grpc::ServerContext* context, ::shisen_interfaces::proto3::CaptureSetting* request, ::grpc::ServerAsyncResponseWriter< ::shisen_interfaces::proto3::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetCaptureSetting() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCaptureSetting(::grpc::ServerContext* context, ::shisen_interfaces::proto3::CaptureSetting* request, ::grpc::ServerAsyncResponseWriter< ::shisen_interfaces::proto3::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::Image* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImage(::grpc::ServerContext* context, ::shisen_interfaces::proto3::Empty* request, ::grpc::ServerAsyncResponseWriter< ::shisen_interfaces::proto3::Image>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCaptureSetting<WithAsyncMethod_SaveCaptureSetting<WithAsyncMethod_SetCaptureSetting<WithAsyncMethod_GetImage<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCaptureSetting() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::CaptureSetting>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::CaptureSetting* response) { return this->GetCaptureSetting(context, request, response); }));}
    void SetMessageAllocatorFor_GetCaptureSetting(
        ::grpc::MessageAllocator< ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::CaptureSetting>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::CaptureSetting>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::CaptureSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCaptureSetting(
      ::grpc::CallbackServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::CaptureSetting* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SaveCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SaveCaptureSetting() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response) { return this->SaveCaptureSetting(context, request, response); }));}
    void SetMessageAllocatorFor_SaveCaptureSetting(
        ::grpc::MessageAllocator< ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SaveCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SaveCaptureSetting(
      ::grpc::CallbackServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetCaptureSetting() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response) { return this->SetCaptureSetting(context, request, response); }));}
    void SetMessageAllocatorFor_SetCaptureSetting(
        ::grpc::MessageAllocator< ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCaptureSetting(
      ::grpc::CallbackServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetImage() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::Image>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::Image* response) { return this->GetImage(context, request, response); }));}
    void SetMessageAllocatorFor_GetImage(
        ::grpc::MessageAllocator< ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::Image>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::Image>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::Image* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImage(
      ::grpc::CallbackServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::Image* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetCaptureSetting<WithCallbackMethod_SaveCaptureSetting<WithCallbackMethod_SetCaptureSetting<WithCallbackMethod_GetImage<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCaptureSetting() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::CaptureSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SaveCaptureSetting() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SaveCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetCaptureSetting() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::Image* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCaptureSetting() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::CaptureSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCaptureSetting(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SaveCaptureSetting() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SaveCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveCaptureSetting(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetCaptureSetting() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCaptureSetting(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::Image* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCaptureSetting() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCaptureSetting(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::CaptureSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCaptureSetting(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SaveCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SaveCaptureSetting() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SaveCaptureSetting(context, request, response); }));
    }
    ~WithRawCallbackMethod_SaveCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SaveCaptureSetting(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetCaptureSetting() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetCaptureSetting(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCaptureSetting(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetImage() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::Image* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCaptureSetting() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::CaptureSetting>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::CaptureSetting>* streamer) {
                       return this->StreamedGetCaptureSetting(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::CaptureSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCaptureSetting(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::shisen_interfaces::proto3::Empty,::shisen_interfaces::proto3::CaptureSetting>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SaveCaptureSetting() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty>* streamer) {
                       return this->StreamedSaveCaptureSetting(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SaveCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveCaptureSetting(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::shisen_interfaces::proto3::CaptureSetting,::shisen_interfaces::proto3::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCaptureSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetCaptureSetting() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty>* streamer) {
                       return this->StreamedSetCaptureSetting(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetCaptureSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCaptureSetting(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::CaptureSetting* /*request*/, ::shisen_interfaces::proto3::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCaptureSetting(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::shisen_interfaces::proto3::CaptureSetting,::shisen_interfaces::proto3::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::Image>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::Image>* streamer) {
                       return this->StreamedGetImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::shisen_interfaces::proto3::Empty* /*request*/, ::shisen_interfaces::proto3::Image* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::shisen_interfaces::proto3::Empty,::shisen_interfaces::proto3::Image>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCaptureSetting<WithStreamedUnaryMethod_SaveCaptureSetting<WithStreamedUnaryMethod_SetCaptureSetting<WithStreamedUnaryMethod_GetImage<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCaptureSetting<WithStreamedUnaryMethod_SaveCaptureSetting<WithStreamedUnaryMethod_SetCaptureSetting<WithStreamedUnaryMethod_GetImage<Service > > > > StreamedService;
};

}  // namespace proto3
}  // namespace shisen_interfaces


#endif  // GRPC_shisen_2eproto__INCLUDED
