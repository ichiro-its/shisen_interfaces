// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: shisen.proto

#include "shisen.pb.h"
#include "shisen.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace shisen_interfaces {
namespace proto3 {

static const char* Config_method_names[] = {
  "/shisen_interfaces.proto3.Config/GetCaptureSetting",
  "/shisen_interfaces.proto3.Config/SaveCaptureSetting",
  "/shisen_interfaces.proto3.Config/SetCaptureSetting",
  "/shisen_interfaces.proto3.Config/GetImage",
};

std::unique_ptr< Config::Stub> Config::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Config::Stub> stub(new Config::Stub(channel, options));
  return stub;
}

Config::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetCaptureSetting_(Config_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SaveCaptureSetting_(Config_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCaptureSetting_(Config_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImage_(Config_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Config::Stub::GetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::shisen_interfaces::proto3::CaptureSetting* response) {
  return ::grpc::internal::BlockingUnaryCall< ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::CaptureSetting, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCaptureSetting_, context, request, response);
}

void Config::Stub::async::GetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::CaptureSetting* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::CaptureSetting, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCaptureSetting_, context, request, response, std::move(f));
}

void Config::Stub::async::GetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::CaptureSetting* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCaptureSetting_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::CaptureSetting>* Config::Stub::PrepareAsyncGetCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCaptureSetting_, context, request);
}

::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::CaptureSetting>* Config::Stub::AsyncGetCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCaptureSettingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Config::Stub::SaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::shisen_interfaces::proto3::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SaveCaptureSetting_, context, request, response);
}

void Config::Stub::async::SaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveCaptureSetting_, context, request, response, std::move(f));
}

void Config::Stub::async::SaveCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveCaptureSetting_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>* Config::Stub::PrepareAsyncSaveCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::CaptureSetting, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SaveCaptureSetting_, context, request);
}

::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>* Config::Stub::AsyncSaveCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSaveCaptureSettingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Config::Stub::SetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::shisen_interfaces::proto3::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCaptureSetting_, context, request, response);
}

void Config::Stub::async::SetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCaptureSetting_, context, request, response, std::move(f));
}

void Config::Stub::async::SetCaptureSetting(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCaptureSetting_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>* Config::Stub::PrepareAsyncSetCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::CaptureSetting, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCaptureSetting_, context, request);
}

::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Empty>* Config::Stub::AsyncSetCaptureSettingRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::CaptureSetting& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCaptureSettingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Config::Stub::GetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::shisen_interfaces::proto3::Image* response) {
  return ::grpc::internal::BlockingUnaryCall< ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::Image, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImage_, context, request, response);
}

void Config::Stub::async::GetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::Image* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::Image, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, std::move(f));
}

void Config::Stub::async::GetImage(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::Image* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Image>* Config::Stub::PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::shisen_interfaces::proto3::Image, ::shisen_interfaces::proto3::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::shisen_interfaces::proto3::Image>* Config::Stub::AsyncGetImageRaw(::grpc::ClientContext* context, const ::shisen_interfaces::proto3::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

Config::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::CaptureSetting, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Config::Service* service,
             ::grpc::ServerContext* ctx,
             const ::shisen_interfaces::proto3::Empty* req,
             ::shisen_interfaces::proto3::CaptureSetting* resp) {
               return service->GetCaptureSetting(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Config::Service* service,
             ::grpc::ServerContext* ctx,
             const ::shisen_interfaces::proto3::CaptureSetting* req,
             ::shisen_interfaces::proto3::Empty* resp) {
               return service->SaveCaptureSetting(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::shisen_interfaces::proto3::CaptureSetting, ::shisen_interfaces::proto3::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Config::Service* service,
             ::grpc::ServerContext* ctx,
             const ::shisen_interfaces::proto3::CaptureSetting* req,
             ::shisen_interfaces::proto3::Empty* resp) {
               return service->SetCaptureSetting(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::shisen_interfaces::proto3::Empty, ::shisen_interfaces::proto3::Image, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Config::Service* service,
             ::grpc::ServerContext* ctx,
             const ::shisen_interfaces::proto3::Empty* req,
             ::shisen_interfaces::proto3::Image* resp) {
               return service->GetImage(ctx, req, resp);
             }, this)));
}

Config::Service::~Service() {
}

::grpc::Status Config::Service::GetCaptureSetting(::grpc::ServerContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::CaptureSetting* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SaveCaptureSetting(::grpc::ServerContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetCaptureSetting(::grpc::ServerContext* context, const ::shisen_interfaces::proto3::CaptureSetting* request, ::shisen_interfaces::proto3::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetImage(::grpc::ServerContext* context, const ::shisen_interfaces::proto3::Empty* request, ::shisen_interfaces::proto3::Image* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace shisen_interfaces
}  // namespace proto3

